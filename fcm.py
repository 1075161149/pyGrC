#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep  8 10:54:36 2019

@author: zjiezhang
"""
import numpy as np

epsilon = 0.0000000000001 #a very small value to ensure that the denominator is not zero

#calculate the distance between every pair of element and center
#input:
#data: the data to be clustered
#V: the centers
def dis(data,V):
    dis = list(map(lambda x: list(map(lambda v: np.linalg.norm(x - v), V)), data))
    return np.array(dis)

#update the membership of every element belonging to every center
def membershipAO(pdist,m):
    U = list(map(lambda dis_xV: list(map(lambda dis_xv: 1/sum(pow(dis_xv/dis_xV, 2/(m-1))),dis_xV)),pdist))
    return np.array(U)

#update the center of every cluster
def centersAO(data,U,m):
    UU=U.T
    V = list(map(lambda mem_XU: sum(data*pow(mem_XU,m).reshape(-1, 1))/sum(pow(mem_XU,m)),UU))
    return np.array(V)

def objectiveFunction(data,U,V,m):
    performance = 0
    return performance

#fuzzy c-means (alternative optimization)
#data: the data to be clustered, which is a list of elements where every element is also a list
#c: number of clusters
#m: fuzziness which should be higher than 1
# threshold:the standard for stopping clustering
def fcmAO(data,c,m,threshold):
    data = np.array(data)
    V=data[np.random.randint(0,len(data),c)]+epsilon
    diff = 10000
    U = []
    while diff>threshold:#if the difference below the threshold
        pdist = dis(data,V)#update the distance between every element and every center
        U = membershipAO(pdist,m)#update the membership
        Vnew = centersAO(data,U,m)#update the centers
        diff = max(sum(((V-Vnew)*(V-Vnew)).T))
        V=Vnew
        print(diff)
    return [U,V]




#test code:
#data=[[1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11],
#      [1.1,1],[1,1],[0.9,1.1],[0.8,0.9],[11,11],[11.2,11.3],[10.9,11]]
#
#[U,V] = fcmAO(data,2,3,0.01)